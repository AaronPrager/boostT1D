import { NextResponse } from "next/server";
import { getServerSession } from "next-auth/next";
import { prisma } from "@/lib/prisma";
import { authOptions } from "@/lib/auth";

interface SessionUser {
  id: string;
  name?: string | null;
  email?: string | null;
  image?: string | null;
}

export async function POST(req: Request) {
  try {
    const session = await getServerSession(authOptions);
    const user = session?.user as SessionUser | undefined;

    if (!user?.email) {
      return new NextResponse("Unauthorized", { status: 401 });
    }

    const body = await req.json();
    const { url } = body;

    if (!url) {
      return new NextResponse("URL is required", { status: 400 });
    }

    const profile = await prisma.profile.findUnique({
      where: {
        userId: user.id,
      },
    });

    if (!profile) {
      return new NextResponse("Profile not found", { status: 404 });
    }

    const photo = await prisma.photo.create({
      data: {
        url,
        profileId: profile.id,
      },
    });

    return NextResponse.json(photo);
  } catch (error) {
    console.error("Photo upload error:", error);
    return new NextResponse("Internal error", { status: 500 });
  }
}

export async function DELETE(req: Request) {
  try {
    const session = await getServerSession(authOptions);
    const user = session?.user as SessionUser | undefined;

    if (!user?.email) {
      return new NextResponse("Unauthorized", { status: 401 });
    }

    const { searchParams } = new URL(req.url);
    const photoId = searchParams.get("id");

    if (!photoId) {
      return new NextResponse("Photo ID is required", { status: 400 });
    }

    const photo = await prisma.photo.findUnique({
      where: {
        id: photoId,
      },
      include: {
        profile: true,
      },
    });

    if (!photo) {
      return new NextResponse("Photo not found", { status: 404 });
    }

    if (photo.profile.userId !== user.id) {
      return new NextResponse("Unauthorized", { status: 401 });
    }

    await prisma.photo.delete({
      where: {
        id: photoId,
      },
    });

    return new NextResponse(null, { status: 204 });
  } catch (error) {
    console.error("Photo delete error:", error);
    return new NextResponse("Internal error", { status: 500 });
  }
} 
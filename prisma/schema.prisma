generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  readings      GlucoseReading[]
  profile       Profile?
  sessions      Session[]
  settings      Settings?
  treatments    Treatment[]
  basalProfiles BasalProfile[]
}

model Profile {
  id          String    @id @default(cuid())
  bio         String?
  location    String?
  website     String?
  birthDate   DateTime?
  phoneNumber String?
  occupation  String?
  userId      String    @unique
  photos      Photo[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Settings {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id])
  nightscoutUrl    String?
  nightscoutApiToken String?
  lowGlucose       Int     @default(70)
  highGlucose      Int     @default(180)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Photo {
  id        String   @id @default(cuid())
  url       String
  caption   String?
  profileId String
  createdAt DateTime @default(now())
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model GlucoseReading {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  sgv       Float
  direction String?
  source    String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
}

model Treatment {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  type         String
  glucoseValue Float?
  carbsGrams   Float?
  insulinUnits Float?
  insulinType  String?
  notes        String?
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
}

model BasalProfile {
  id          String      @id @default(cuid())
  name        String
  userId      String      @unique // Make userId unique to ensure only one profile per user
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  rates       BasalRate[]
  // Add carb ratio settings
  carbRatios  CarbRatio[]
  // Add insulin sensitivity factors
  sensitivities Sensitivity[]
  // Add target ranges
  targetRanges TargetRange[]
  // Add other settings
  dia         Float?      // Duration of Insulin Action in hours
  timezone    String?     // User's timezone
  units       String?     // Blood glucose units (mg/dl or mmol/L)
  carbsHr     Int?       // Carbs per hour
  delay       Int?       // Insulin delay in minutes
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId])
}

model BasalRate {
  id             String       @id @default(cuid())
  profileId      String
  startTime      String       // Format: "HH:mm" (24-hour)
  rate          Float
  profile        BasalProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model CarbRatio {
  id             String       @id @default(cuid())
  profileId      String
  startTime      String       // Format: "HH:mm" (24-hour)
  value         Float        // Carbs per unit of insulin
  profile        BasalProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Sensitivity {
  id             String       @id @default(cuid())
  profileId      String
  startTime      String       // Format: "HH:mm" (24-hour)
  value         Float        // ISF - Blood glucose drop per unit of insulin
  profile        BasalProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model TargetRange {
  id             String       @id @default(cuid())
  profileId      String
  startTime      String       // Format: "HH:mm" (24-hour)
  low           Float        // Lower target
  high          Float        // Upper target
  profile        BasalProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

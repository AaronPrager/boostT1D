generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  country        String?
  dateOfBirth    DateTime?
  emailConfirmed Boolean          @default(false)
  state          String?
  accounts       Account[]
  BasalProfile   BasalProfile?
  GlucoseReading GlucoseReading[]
  profile        Profile?
  sessions       Session[]
  settings       Settings?
  treatments     Treatment[]
  buddyRequests  BuddyConnection[] @relation("BuddyConnectionRequester")
  buddyResponses BuddyConnection[] @relation("BuddyConnectionTarget")
  newsPreferences NewsPreference[]
  newsBookmarks  NewsBookmark[]
  newsInteractions NewsInteraction[]
}

model Profile {
  id                 String    @id @default(cuid())
  bio                String?
  location           String?
  website            String?
  birthDate          DateTime?
  phoneNumber        String?
  occupation         String?
  userId             String    @unique
  diagnosisAge       Int?
  favoriteActivities String?
  data               Json?
  Photo              Photo[]
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Treatment {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  type         String
  glucoseValue Float?
  carbsGrams   Float?
  insulinUnits Float?
  insulinType  String?
  notes        String?
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
}

model Settings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  createdAt          DateTime @default(now())
  highGlucose        Int      @default(180)
  lowGlucose         Int      @default(70)
  nightscoutUrl      String?
  updatedAt          DateTime @updatedAt
  nightscoutApiToken String?
  nightscoutApiSecret String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BasalProfile {
  id          String        @id
  name        String
  userId      String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  carbsHr     Int?
  delay       Int?
  dia         Float?
  timezone    String?
  units       String?
  User        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  BasalRate   BasalRate[]
  CarbRatio   CarbRatio[]
  Sensitivity Sensitivity[]
  TargetRange TargetRange[]

  @@index([userId])
}

model BasalRate {
  id           String       @id
  profileId    String
  startTime    String
  rate         Float
  BasalProfile BasalProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model CarbRatio {
  id           String       @id
  profileId    String
  startTime    String
  value        Float
  BasalProfile BasalProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model GlucoseReading {
  id        String   @id
  timestamp DateTime @default(now())
  sgv       Float
  direction String?
  source    String
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
}

model Photo {
  id        String   @id
  url       String
  caption   String?
  profileId String
  createdAt DateTime @default(now())
  Profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Sensitivity {
  id           String       @id
  profileId    String
  startTime    String
  value        Float
  BasalProfile BasalProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model TargetRange {
  id           String       @id
  profileId    String
  startTime    String
  low          Float
  high         Float
  BasalProfile BasalProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model BuddyConnection {
  id          String   @id @default(cuid())
  requesterId String
  targetId    String
  status      String   @default("pending") // pending, approved, rejected
  message     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  requester   User     @relation("BuddyConnectionRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  target      User     @relation("BuddyConnectionTarget", fields: [targetId], references: [id], onDelete: Cascade)

  @@index([requesterId])
  @@index([targetId])
  @@unique([requesterId, targetId])
}

model NewsPreference {
  id         String   @id @default(cuid())
  userId     String   @unique
  categories String[] @default([])
  sources    String[] @default([])
  keywords   String[] @default([])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NewsSource {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  website     String
  rssUrl      String?
  apiUrl      String?
  logoUrl     String?
  category    String
  reliability String   @default("medium") // low, medium, high
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  articles    NewsArticle[]
}

model NewsArticle {
  id          String   @id @default(cuid())
  sourceId    String
  title       String
  summary     String?
  content     String?
  url         String   @unique
  imageUrl    String?
  author      String?
  publishedAt DateTime @default(now())
  category    String   @default("general")
  tags        String[] @default([])
  importance  String   @default("low") // low, medium, high, critical
  isBreaking  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  source      NewsSource        @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  bookmarks   NewsBookmark[]
  interactions NewsInteraction[]

  @@index([sourceId])
  @@index([category])
  @@index([importance])
  @@index([publishedAt])
}

model NewsBookmark {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  createdAt DateTime @default(now())
  
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   NewsArticle  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
  @@index([userId])
  @@index([articleId])
}

model NewsInteraction {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  type      String   // like, share, etc.
  createdAt DateTime @default(now())
  
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   NewsArticle  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId, type])
  @@index([userId])
  @@index([articleId])
  @@index([type])
}
